# Blazor-FullStack-CRUD-REST-API-ContactApp

## How to build project steps
If you don't have .Net 6:
"winget install Microsoft.DotNet.SDK.6" <-- paste into the console
We open the ContactsCRUD.sln file through Visual Studio 2022

##We need to install the NuGet packages for the Server application:
- Microsoft.AspNetCore.Components.WebAssembly               v(6.11)
- Microsoft.AspNetCore.Components.WebAssembly.DevServer     v(6.11)
- Microsoft.AspNetCore.Components.WebAssembly.Server        v(6.11)
- Microsoft.EntityFrameworkCore                		  v(6.11)
- Microsoft.EntityFrameworkCore.Design         		  v(6.11)
- Microsoft.EntityFrameworkCore.SqlServer      		  v(6.11)
- Microsoft.EntityFrameworkCore.Tools          		  v(6.11)

## Database
We need to invoke the command "dotnet ef database update" 
the local database should then be created, under the same name as the connectionstring database name.
With this method, we will also get the basic startup data :) 

##Last Step
We can already run the applications through Visual Studio, or the command line "dotnet run"
The application can be found at: https://localhost:7293/

### Description of the most relevant classes/pages
##ContactsCRUD.Shared:
- Category.cs class which represents the data model of the category of the contact
- Contact.cs class that represents the contact data model

## Contacts.CRUD.Server.Data:	
- DataContext.cs the main class on which database-related functions are based
- ORM using EntityFramework

## Contacts.CRUD.Server:
- Migrations.cs classes generated by the Entity framework, which are used to 
  to create ready-made SQL database solutions based on models passed in DataContext.cs,
  without having to write the database from scratch in SQL.		

## Contacts.CRUD.Server.Controllers:
- ContactController.cs REST API controller class, responsible for transferring
  data between the frontend application and the backend, as well as 
  between the backend and the database using requests
  http requests in JSON format

## Contacts.CRUD.Client.Services:
- IContactService.cs an interface that describes what to implement in the actual service class.
- ContactService.cs client-side service class, handles and manages all the logic that 
  goes or is sent from/from the client to the server, this is where the data from the API goes 
  and are expected before being displayed on the end-user's side

## Contacts.CRUD.Client.Pages:
- Contacts.razor razor page showing all contacts in the database
  and has two methods redirecting to https://localhost:7293/contact to create a new contact
  and https://localhost:7293/contact/id which is responsible for redirecting to editing a specific contact
- SingleContact.razor razor page showing a specific contact to edit, create or delete a new contact
